from django.test import TestCase
from django.contrib.auth import get_user_model
from catalog.models.item import ItemSKU
from django.contrib.auth.models import Permission
from django.core.exceptions import ValidationError

User = get_user_model()

# Create your tests here.
class ItemSKUModelTest(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(username='testuser', password='testpass')
        self.item = ItemSKU.objects.create(
            sku_code='ITEM001',
            name='Test Item',
            unit='pcs',
            type='RAW',
            status='ACTIVE',
            created_by=self.user,
            updated_by=self.user,
            description='This is a test item.'
        )

    def test_item_creation(self):
        self.assertEqual(self.item.sku_code, 'ITEM001')
        self.assertEqual(self.item.name, 'Test Item')
        self.assertEqual(self.item.unit, 'pcs')
        self.assertEqual(self.item.type, 'RAW')
        self.assertEqual(self.item.status, 'ACTIVE')
        self.assertEqual(self.item.created_by, self.user)
        self.assertEqual(self.item.updated_by, self.user)
        self.assertEqual(str(self.item), 'ITEM001 - Test Item')

    def test_item_duplicate_sku_code(self):
        with self.assertRaises(Exception):
            ItemSKU.objects.create(
                sku_code='ITEM001',
                name='Duplicate Item',
                unit='pcs',
                type='PRODUCT',
                status='INACTIVE',
                created_by=self.user,
                updated_by=self.user,
                description='This is a duplicate item.'
            )

    def test_item_change_status(self):
        self.item.status = 'INACTIVE'
        self.item.save()
        self.assertEqual(self.item.status, 'INACTIVE')

    def test_item_change_wrong_status(self):
        with self.assertRaises(Exception):
            self.item.status = 'INVALID_STATUS'
            self.item.full_clean()  # บังคับตรวจสอบ field
            self.item.save()

    def test_type_is_immutable(self):
        item = ItemSKU.objects.create(
            sku_code='IMM001',
            name='Immutable Test',
            unit='pcs',
            created_by=self.user,
            updated_by=self.user,
        )
        item.type = 'PRODUCT'
        with self.assertRaises(ValidationError):
            item.save()

class CreateItemTest(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(username='testuser', password='testpass')

    def test_create_item_with_out_login(self):
        response = self.client.post('/catalog/create', {
            'sku_code': 'ITEM001',
            'name': 'Unauthorized Item',
            'unit': 'pcs',
            'type': 'RAW',
            'status': 'ACTIVE',
            'description': 'This item should not be created.'
        })
        self.assertEqual(response.status_code, 302)  # Redirect to login page     

    def test_create_item_with_permission(self):
        add_itemsku_permission = Permission.objects.get(codename='add_itemsku')
        self.user.user_permissions.add(add_itemsku_permission)
        self.client.login(username='testuser', password='testpass')
        response = self.client.post('/catalog/create', {
            'sku_code': 'ITEM002',
            'name': 'New Item',
            'unit': 'pcs',
            'type': 'PRODUCT',
            'status': 'ACTIVE',
            'description': 'This is a new item.'
        })
        self.assertEqual(response.status_code, 201)
        # self.assertIn('Item created successfully', response.json()['message'])

    def test_create_item_without_permission(self):
        self.client.login(username='testuser', password='testpass')
        response = self.client.post('/catalog/create', {
            'sku_code': 'ITEM003',
            'name': 'Unauthorized Item',
            'unit': 'pcs',
            'type': 'PACKAGE',
            'status': 'ACTIVE',
            'description': 'This item should not be created.'
        })
        self.assertEqual(response.status_code, 403)
        # self.assertIn('Permission denied', response.json()['error'])

class CreateItemTestWithPermission(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(username='testuser', password='testpass')
        self.add_itemsku_permission = Permission.objects.get(codename='add_itemsku')
        self.user.user_permissions.add(self.add_itemsku_permission)
        self.client.login(username='testuser', password='testpass')

    def test_create_item_with_valid_data(self):
        response = self.client.post('/catalog/create', {
            'sku_code': 'ITEM004',
            'name': 'Valid Item',
            'unit': 'pcs',
            'type': 'RAW',
            'status': 'ACTIVE',
            'description': 'This is a valid item.'
        })
        self.assertEqual(response.status_code, 201)

    def test_create_item_with_invalid_data(self):
        response = self.client.post('/catalog/create', {
            'sku_code': '',  # Invalid: sku_code is required
            'name': 'Invalid Item',
            'unit': 'pcs',
            'type': 'RAW',
            'status': 'ACTIVE',
            'description': 'This item has invalid data.'
        })
        self.assertEqual(response.status_code, 400)

class UpdateItemTest(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(username='testuser', password='testpass')
        self.item = ItemSKU.objects.create(
            sku_code='ITEM005',
            name='Item to Update',
            unit='pcs',
            type='RAW',
            status='ACTIVE',
            created_by=self.user,
            updated_by=self.user,
            description='This item will be updated.'
        )
        self.change_itemsku_permission = Permission.objects.get(codename='change_itemsku')

    def test_update_item_with_out_login(self):
        response = self.client.post(f'/catalog/update/{self.item.sku_code}', {
            'sku_code': 'ITEM005',
            'name': 'Updated Item',
            'unit': 'pcs',
            'type': 'PRODUCT',
            'status': 'ACTIVE',
            'description': 'This item has been updated.'
        })
        self.assertEqual(response.status_code, 302)
        
    def test_update_item_with_out_permission(self):
        self.client.login(username='testuser', password='testpass')
        response = self.client.post(f'/catalog/update/{self.item.sku_code}', {
            'sku_code': 'ITEM005',
            'name': 'Updated Item',
            'unit': 'pcs',
            'type': 'PRODUCT',
            'status': 'ACTIVE',
            'description': 'This item has been updated.'
        })
        self.assertEqual(response.status_code, 403)
    
    def test_update_item_with_permission(self):
        self.user.user_permissions.add(self.change_itemsku_permission)
        self.client.login(username='testuser', password='testpass')
        response = self.client.post(f'/catalog/update/{self.item.sku_code}', {
            'sku_code': 'ITEM005',
            'name': 'Updated Item',
            'unit': 'pcs',
            'type': 'RAW',
            'status': 'ACTIVE',
            'description': 'This item has been updated.'
        })
        self.assertEqual(response.status_code, 200)

class UpdateItemTestWithPermission(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(username='testuser', password='testpass')
        self.item = ItemSKU.objects.create(
            sku_code='ITEM006',
            name='Item to Update',
            unit='pcs',
            type='RAW',
            status='ACTIVE',
            created_by=self.user,
            updated_by=self.user,
            description='This item will be updated.'
        )
        self.change_itemsku_permission = Permission.objects.get(codename='change_itemsku')
        self.user.user_permissions.add(self.change_itemsku_permission)
        self.client.login(username='testuser', password='testpass')

    def test_update_item_with_valid_data(self):
        response = self.client.post(f'/catalog/update/{self.item.sku_code}', {
            'sku_code': 'ITEM006',
            'name': 'Updated Valid Item',
            'unit': 'pcs',
            'type': 'RAW',
            'status': 'ACTIVE',
            'description': 'This item has been updated with valid data.'
        })
        self.assertEqual(response.status_code, 200)

    def test_update_item_with_invalid_data(self):
        response = self.client.post(f'/catalog/update/{self.item.sku_code}', {
            'sku_code': '',  # Invalid: sku_code is required
            'name': 'Invalid Item Update',
            'unit': 'pcs',
            'type': 'RAW',
            'status': 'ACTIVE',
            'description': 'This item update has invalid data.'
        })
        self.assertEqual(response.status_code, 400)
        
    def test_update_item_type_must_immutable(self):
        response = self.client.post(f'/catalog/update/{self.item.sku_code}', {
            'sku_code': 'ITEM006',
            'name': 'Invalid Type Item Update',
            'unit': 'pcs',
            'type': 'PRODUCT',
            'status': 'ACTIVE',
            'description': 'This item update has an invalid type.'
        })
        self.assertEqual(response.status_code, 400)

# test category model
class CategoryModelTest(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(username='testuser', password='testpass')

    def test_category_creation(self):
        category = Category.objects.create(
            name='Test Category',
            description='This is a test category.',
            created_by=self.user,
            updated_by=self.user
        )
        self.assertEqual(category.name, 'Test Category')
        self.assertEqual(category.description, 'This is a test category.')
        self.assertEqual(category.created_by, self.user)
        self.assertEqual(category.updated_by, self.user)
        self.assertEqual(str(category), 'Test Category')

    def test_category_duplicate_name(self):
        Category.objects.create(
            name='Unique Category',
            description='This is a unique category.',
            created_by=self.user,
            updated_by=self.user
        )
        with self.assertRaises(Exception):
            Category.objects.create(
                name='Unique Category',
                description='This category should not be created.',
                created_by=self.user,
                updated_by=self.user
            )

# test item image model